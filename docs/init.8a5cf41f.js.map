{"version":3,"sources":["ui.js","constants.js","gameState.js","buttons.js","init.js"],"names":["modFox","state","document","querySelector","className","modScene","togglePoopBag","show","classList","toggle","writeModal","text","innerHTML","TICK_RATE","ICONS","RAIN_CHANCE","SCENES","DAY_LENGTH","NIGHT_LENGTH","getNextHungerTime","clock","Math","floor","random","getNextDieTime","getNextPoopTime","gameState","current","wakeTime","sleepTime","hungryTime","dieTime","timeToStartCelebrating","timeToEndCelebrating","poopTime","tick","console","log","wake","sleep","getHungry","die","startCelebrating","endCelebrating","poop","startGame","scene","determineState","clearTimes","handleUserAction","icon","includes","changeWeather","cleanUpPoop","feed","length","bind","toggleHighlighted","initButtons","selectedIcon","addEventListener","buttonClick","target","contains","init","nextTimeToTick","Date","now","requestAnimationFrame","nextAnimationFrame"],"mappings":"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","file":"init.8a5cf41f.js","sourceRoot":"..\\src","sourcesContent":["export const modFox = function modFox(state) {\r\n    document.querySelector(\".fox\").className = `fox fox-${state}`;\r\n};\r\n\r\nexport const modScene = function modScene(state) {\r\n    document.querySelector(\".game\").className = `game ${state}`;\r\n};\r\n\r\nexport const togglePoopBag = function togglePoopBag(show) {\r\n    document.querySelector(\".poop-bag\").classList.toggle(\"hidden\", !show);\r\n};\r\n\r\nexport const writeModal = function writeModal(text = \"\") {\r\n    document.querySelector(\r\n        \".modal\"\r\n    ).innerHTML = `<div class=\"modal-inner\">${text}</div>`;\r\n};\r\n","export const TICK_RATE = 3000;\r\nexport const ICONS = [\"fish\", \"poop\", \"weather\"];\r\nexport const RAIN_CHANCE = 0.2;\r\nexport const SCENES = [\"day\", \"rain\"];\r\nexport const DAY_LENGTH = 60;\r\nexport const NIGHT_LENGTH = 4;\r\n\r\nexport const getNextHungerTime = (clock) =>\r\n    Math.floor(Math.random() * 3) + 5 + clock;\r\n\r\nexport const getNextDieTime = (clock) =>\r\n    Math.floor(Math.random() * 2) + 3 + clock;\r\n\r\nexport const getNextPoopTime = (clock) =>\r\n    Math.floor(Math.random() * 2) + 4 + clock;\r\n","import { modFox, modScene, togglePoopBag, writeModal } from \"./ui\";\r\nimport {\r\n    RAIN_CHANCE,\r\n    SCENES,\r\n    DAY_LENGTH,\r\n    NIGHT_LENGTH,\r\n    getNextDieTime,\r\n    getNextHungerTime,\r\n    getNextPoopTime,\r\n} from \"./constants\";\r\n\r\nconst gameState = {\r\n    current: \"INIT\",\r\n    clock: 1,\r\n    wakeTime: -1,\r\n    sleepTime: -1,\r\n    hungryTime: -1,\r\n    dieTime: -1,\r\n    timeToStartCelebrating: -1,\r\n    timeToEndCelebrating: -1,\r\n    poopTime: -1,\r\n    tick() {\r\n        this.clock++;\r\n        console.log(\"clock\", this.clock);\r\n\r\n        if (this.clock === this.wakeTime) {\r\n            this.wake();\r\n        } else if (this.sleepTime === this.clock) {\r\n            this.sleep();\r\n        } else if (this.clock == this.hungryTime) {\r\n            this.getHungry();\r\n        } else if (this.clock == this.dieTime) {\r\n            this.die();\r\n        } else if (this.clock == this.timeToStartCelebrating) {\r\n            this.startCelebrating();\r\n        } else if (this.clock == this.timeToEndCelebrating) {\r\n            this.endCelebrating();\r\n        } else if (this.clock == this.poopTime) {\r\n            this.poop();\r\n        }\r\n\r\n        return this.clock;\r\n    },\r\n    startGame() {\r\n        console.log(\"hatching\");\r\n        this.current = \"HATCHING\";\r\n        this.wakeTime = this.clock + 3;\r\n        modFox(\"egg\");\r\n        modScene(\"day\");\r\n        writeModal();\r\n    },\r\n    wake() {\r\n        console.log(\"awoken\");\r\n        this.current = \"IDLING\";\r\n        this.wakeTime = -1;\r\n        this.scene = Math.random() > RAIN_CHANCE ? 0 : 1;\r\n        modScene(SCENES[this.scene]);\r\n        this.sleepTime = this.clock + DAY_LENGTH;\r\n        this.hungryTime = getNextHungerTime(this.clock);\r\n        this.determineState();\r\n    },\r\n    poop() {\r\n        this.current = \"POOPING\";\r\n        this.poopTime = -1;\r\n        this.dieTime = getNextDieTime(this.clock);\r\n        modFox(\"pooping\");\r\n    },\r\n    sleep() {\r\n        this.current = \"SLEEP\";\r\n        modFox(\"sleep\");\r\n        modScene(\"night\");\r\n        this.clearTimes();\r\n        this.wakeTime = this.clock + NIGHT_LENGTH;\r\n    },\r\n    getHungry() {\r\n        this.current = \"HUNGRY\";\r\n        this.dieTime = getNextDieTime(this.clock);\r\n        this.hungryTime = -1;\r\n        modFox(\"hungry\");\r\n    },\r\n    clearTimes() {\r\n        this.wakeTime = -1;\r\n        this.sleepTime = -1;\r\n        this.hungryTime = -1;\r\n        this.dieTime = -1;\r\n        this.poopTime = -1;\r\n        this.timeToEndCelebrating = -1;\r\n        this.timeToStartCelebrating = -1;\r\n    },\r\n    die() {\r\n        this.current = \"DEAD\";\r\n        modScene(\"dead\");\r\n        modFox(\"dead\");\r\n        this.clearTimes();\r\n        writeModal(\"The fox died :( <br/> Press the middle button to start\");\r\n    },\r\n    startCelebrating() {\r\n        this.current = \"CELEBRATING\";\r\n        modFox(\"celebrate\");\r\n        this.timeToStartCelebrating = -1;\r\n        this.timeToEndCelebrating = this.clock + 2;\r\n        this.determineState();\r\n    },\r\n    determineState() {\r\n        if (this.current === \"IDLING\") {\r\n            if (SCENES[this.scene] == \"rain\") {\r\n                modFox(\"rain\");\r\n            } else {\r\n                modFox(\"idling\");\r\n            }\r\n        }\r\n    },\r\n    endCelebrating() {\r\n        this.timeToEndCelebrating = -1;\r\n        this.current = \"IDLING\";\r\n        modFox(\"idling\");\r\n        togglePoopBag(false);\r\n    },\r\n    handleUserAction(icon) {\r\n        if (\r\n            [\"HATCHING\", \"CELEBRATING\", \"FEEDING\", \"SLEEP\"].includes(\r\n                this.current\r\n            )\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        if (this.current === \"INIT\" || this.current === \"DEAD\") {\r\n            this.startGame();\r\n            return;\r\n        }\r\n\r\n        switch (icon) {\r\n            case \"weather\":\r\n                this.changeWeather();\r\n                break;\r\n            case \"poop\":\r\n                this.cleanUpPoop();\r\n                break;\r\n            case \"fish\":\r\n                this.feed();\r\n                break;\r\n        }\r\n    },\r\n    changeWeather() {\r\n        this.scene = (this.scene + 1) % SCENES.length;\r\n        modScene(SCENES[this.scene]);\r\n        this.determineState();\r\n    },\r\n    cleanUpPoop() {\r\n        if (!this.current == \"POOPING\") {\r\n            return;\r\n        }\r\n        this.dieTime = -1;\r\n        togglePoopBag(true);\r\n        this.startCelebrating();\r\n        this.hungryTime = getNextHungerTime(this.clock);\r\n    },\r\n    feed() {\r\n        if (this.current != \"HUNGRY\") {\r\n            return;\r\n        }\r\n\r\n        this.current = \"FEEDING\";\r\n        this.dieTime = -1;\r\n        this.poopTime = getNextPoopTime(this.clock);\r\n        modFox(\"eating\");\r\n        this.timeToStartCelebrating = this.clock + 2;\r\n    },\r\n};\r\n\r\nexport const handleUserAction = gameState.handleUserAction.bind(gameState);\r\nexport default gameState;\r\n","import { ICONS } from \"./constants\";\r\n\r\nconst toggleHighlighted = (icon, show) => {\r\n    document\r\n        .querySelector(`.${ICONS[icon]}-icon`)\r\n        .classList.toggle(\"highlighted\", show);\r\n};\r\n\r\n// toogleHighlighted('poop', false)\r\n\r\nexport default function initButtons(handleUserAction) {\r\n    let selectedIcon = 0;\r\n\r\n    function buttonClick({ target }) {\r\n        if (target.classList.contains(\"left-btn\")) {\r\n            toggleHighlighted(selectedIcon, false);\r\n            selectedIcon = (2 + selectedIcon) % ICONS.length;\r\n            toggleHighlighted(selectedIcon, true);\r\n        } else if (target.classList.contains(\"right-btn\")) {\r\n            toggleHighlighted(selectedIcon, false);\r\n            selectedIcon = (1 + selectedIcon) % ICONS.length;\r\n            toggleHighlighted(selectedIcon, true);\r\n        } else {\r\n            handleUserAction(ICONS[selectedIcon]);\r\n        }\r\n    }\r\n    document.querySelector(\".buttons\").addEventListener(\"click\", buttonClick);\r\n}\r\n","import game, { handleUserAction } from \"./gameState\";\r\nimport { TICK_RATE } from \"./constants\";\r\nimport initButtons from \"./buttons\";\r\n\r\nfunction init() {\r\n    console.log(\"starting game\");\r\n    initButtons(handleUserAction);\r\n\r\n    let nextTimeToTick = Date.now();\r\n\r\n    function nextAnimationFrame() {\r\n        const now = Date.now();\r\n\r\n        if (nextTimeToTick <= now) {\r\n            game.tick();\r\n            nextTimeToTick = now + TICK_RATE;\r\n        }\r\n        requestAnimationFrame(nextAnimationFrame);\r\n    }\r\n    requestAnimationFrame(nextAnimationFrame);\r\n}\r\n\r\ninit();\r\n"]}